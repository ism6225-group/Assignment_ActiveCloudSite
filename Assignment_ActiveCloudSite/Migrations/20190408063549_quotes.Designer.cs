// <auto-generated />
using System;
using Assignment_ActiveCloudSite.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment_ActiveCloudSite.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20190408063549_quotes")]
    partial class quotes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment_ActiveCloudSite.Models.Article", b =>
                {
                    b.Property<string>("datetime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("headline");

                    b.Property<string>("image");

                    b.Property<string>("related");

                    b.Property<string>("source");

                    b.Property<string>("summary");

                    b.Property<string>("symbol");

                    b.Property<string>("url");

                    b.HasKey("datetime");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Assignment_ActiveCloudSite.Models.Quote", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<float?>("change");

                    b.Property<float?>("changePercent");

                    b.Property<float?>("close");

                    b.Property<long?>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<float?>("delayedPrice");

                    b.Property<long?>("delayedPriceTime");

                    b.Property<float?>("extendedChange");

                    b.Property<float?>("extendedChangePercent");

                    b.Property<float?>("extendedPrice");

                    b.Property<long?>("extendedPriceTime");

                    b.Property<float?>("high");

                    b.Property<float?>("iexAskPrice");

                    b.Property<long?>("iexAskSize");

                    b.Property<float?>("iexBidPrice");

                    b.Property<long?>("iexBidSize");

                    b.Property<string>("iexLastUpdated");

                    b.Property<float?>("iexMarketPercent");

                    b.Property<float?>("iexRealtimePrice");

                    b.Property<long?>("iexRealtimeSize");

                    b.Property<long?>("iexVolume");

                    b.Property<float?>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<long?>("latestUpdate");

                    b.Property<long?>("latestVolume");

                    b.Property<float?>("low");

                    b.Property<float?>("marketCap");

                    b.Property<float?>("open");

                    b.Property<long?>("openTime");

                    b.Property<float?>("peRatio");

                    b.Property<float?>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<float?>("week52High");

                    b.Property<float?>("week52Low");

                    b.Property<float?>("ytdChange");

                    b.HasKey("symbol");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Assignment_ActiveCloudSite.Models.Recommendation", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("consensusEndDate");

                    b.Property<float?>("consensusStartDate");

                    b.Property<float?>("corporateActionsAppliedDate");

                    b.Property<float?>("ratingBuy");

                    b.Property<float?>("ratingHold");

                    b.Property<float?>("ratingNone");

                    b.Property<float?>("ratingOverweight");

                    b.Property<float?>("ratingScaleMark");

                    b.Property<float?>("ratingSell");

                    b.Property<float?>("ratingUnderweight");

                    b.HasKey("symbol");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Assignment_ActiveCloudSite.Models.Sector", b =>
                {
                    b.Property<string>("name")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("lastUppdated");

                    b.Property<float?>("performance");

                    b.Property<string>("type");

                    b.HasKey("name");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Assignment_ActiveCloudSite.Models.Symbol", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}
